import { ResolverFn } from "graphql-subscriptions";
import { TypeValueThunk, TypeOptions, ClassTypeResolver, SubscriptionFilterFunc, SubscriptionTopicFunc } from "type-graphql/dist/decorators/types";
import { ParamMetadata } from "type-graphql/dist/metadata/definitions/param-metadata";
import { Middleware } from "type-graphql/dist/interfaces/Middleware";
import { Complexity } from "type-graphql/dist/interfaces/index";
import { DirectiveMetadata } from "type-graphql/dist/metadata/definitions/directive-metadata";
import { ExtensionsMetadata } from "type-graphql/dist/metadata/definitions/extensions-metadata";
export interface BaseResolverMetadata {
    methodName: string;
    schemaName: string;
    target: Function;
    complexity: Complexity | undefined;
    resolverClassMetadata?: ResolverClassMetadata;
    params?: ParamMetadata[];
    roles?: any[];
    middlewares?: Array<Middleware<any>>;
    directives?: DirectiveMetadata[];
    extensions?: ExtensionsMetadata;
}
export interface ResolverMetadata extends BaseResolverMetadata {
    getReturnType: TypeValueThunk;
    returnTypeOptions: TypeOptions;
    description?: string;
    deprecationReason?: string;
}
export interface FieldResolverMetadata extends BaseResolverMetadata {
    kind: "internal" | "external";
    description?: string;
    deprecationReason?: string;
    getType?: TypeValueThunk;
    typeOptions?: TypeOptions;
    getObjectType?: ClassTypeResolver;
}
export interface SubscriptionResolverMetadata extends ResolverMetadata {
    topics: string | string[] | SubscriptionTopicFunc | undefined;
    filter: SubscriptionFilterFunc | undefined;
    subscribe: ResolverFn | undefined;
}
export interface ResolverClassMetadata {
    target: Function;
    getObjectType: ClassTypeResolver;
    isAbstract?: boolean;
    superResolver?: ResolverClassMetadata;
}
