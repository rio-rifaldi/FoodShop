/// <reference types="node" />
/// <reference types="node" />
import { IncomingMessage, ServerResponse } from 'http';
import { Readable } from 'stream';
export interface UploadOptions {
    maxFieldSize?: number | undefined;
    maxFileSize?: number | undefined;
    maxFiles?: number | undefined;
    environment?: 'lambda' | 'gcf' | 'azure';
}
export interface GraphQLOperation {
    query: string;
    operationName?: null | string | undefined;
    variables?: null | unknown | undefined | any;
}
export declare type IncomingReq = Partial<IncomingMessage> & {
    body?: string;
    rawBody?: string;
    req?: any;
    pipe?: any;
    unpipe?: any;
    once?: any;
    resume?: any;
};
export declare function processRequest<T = any>(req?: IncomingReq | Readable, res?: Partial<ServerResponse>, uploadOptions?: UploadOptions): Promise<GraphQLOperation | GraphQLOperation[] | T>;
